name: Azure app deployment

on:
  push:
    branches: [ main ]

env:
  REGISTRY_NAME: forecastcontainerregistry
  REGISTRY_DOMAIN: forecastcontainerregistry.azurecr.io
  IMAGE_NAME: forecast-backend
  CONTAINER_APP: forecast-app
  RESOURCE_GROUP: forecast-rg

permissions:
  contents: read
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Use python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Django server
        run: |
          python manage.py migrate
          python manage.py test &&
          python manage.py runserver &
        env:
          DATABASE_NAME: postgres
          DATABASE_HOST: localhost
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_PORT: 5432
          ENGINE: django.db.backends.postgresql_psycopg2
          SECRET_KEY: django-insecure-key-${{ github.run_id }}-${{ github.run_attempt }}
          EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
          EMAIL_HOST: smtp.gmail.com
          EMAIL_PORT: 587
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_SSL: False
          EMAIL_USE_TLS: True
          FRONTEND_DOMAIN: http://127.0.0.1:8000/
          BACKEND_DOMAIN: http://127.0.0.1:8000/
          ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,back
          SEMIANNUAL_SUBSCRIPTION_ID: ${{ secrets.SEMIANNUAL_SUBSCRIPTION_ID }}
          MONTHLY_SUBSCRIPTION_ID: ${{ secrets.MONTHLY_SUBSCRIPTION_ID }}
          ANNUAL_SUBSCRIPTION_ID: ${{ secrets.ANNUAL_SUBSCRIPTION_ID }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_DOMAIN }}
          username: ${{ secrets.AZURE_REGISTRY_LOGIN }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}:latest, ${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.build-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Container App deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ env.REGISTRY_NAME }}
          containerAppName: ${{ env.CONTAINER_APP }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        